{
  "title": "Modul 1: Flutter Widget Tree & State Management",
  "subtitle": "Memahami Dasar-dasar Flutter Widget dan State",
  "description": "Modul ini akan memperkenalkan Anda pada konsep fundamental Flutter: Widget Tree, perbedaan StatelessWidget vs StatefulWidget, dan dasar-dasar state management.",
  "duration": "3 jam",
  "difficulty": "beginner",
  "objectives": [
    "Memahami arsitektur Flutter Widget Tree",
    "Menguasai perbedaan StatelessWidget dan StatefulWidget",
    "Implementasi layout dasar dengan Column, Row, Container",
    "Menerapkan state management dengan setState()"
  ],
  "prerequisites": [
    "Dasar-dasar pemrograman Dart",
    "Pemahaman konsep OOP",
    "Flutter SDK sudah terinstall",
    "IDE (VS Code/Android Studio) sudah dikonfigurasi"
  ],
  "breadcrumb": [
    {
      "title": "Home",
      "url": "/index.html"
    },
    {
      "title": "Modules",
      "url": "/modules.html"
    },
    {
      "title": "Modul 1",
      "url": "/modul/modul1.html"
    }
  ],
  "navigation": {
    "previous": null,
    "next": {
      "title": "Modul 2: Basic Layouts and UI Components",
      "url": "/modul/modul2.html"
    }
  },
  "components": [
    {
      "type": "hero",
      "id": "module-hero",
      "data": {
        "title": "Flutter Widget Tree & State Management",
        "subtitle": "Modul 1 - Konsep Fundamental Flutter",
        "description": "Memahami arsitektur UI Flutter berbasis widget, perbedaan StatelessWidget vs StatefulWidget, dan implementasi state management dasar.",
        "buttons": [
          {
            "text": "Download Materials",
            "url": "#download-section",
            "icon": "fas fa-download",
            "primary": false
          }
        ]
      }
    },
    {
      "type": "alert",
      "id": "setup-alert",
      "data": {
        "type": "info",
        "title": "Persiapan Sebelum Memulai",
        "content": "Pastikan Flutter SDK sudah terinstall dan IDE (VS Code/Android Studio) sudah dikonfigurasi dengan plugin Flutter dan Dart.",
        "dismissible": false
      }
    },
    {
      "type": "text",
      "id": "intro-content",
      "data": {
        "content": "<h2 class='text-2xl font-bold mb-4'>Konsep Dasar Flutter Widget Tree</h2><h3 class='text-xl font-semibold mb-3'>Arsitektur UI Flutter Berbasis Widget</h3><p class='mb-4'>Dalam dunia Flutter, semua yang Anda lihat di layar adalah widget. Mulai dari tombol, teks, ikon, hingga tata letak satu halaman penuh. Widget-widget ini tidak berdiri sendiri, melainkan tersusun dalam sebuah struktur pohon yang disebut Widget Tree. Bayangkan sebuah pohon keluarga, di mana ada widget \"induk\" (parent) yang memiliki satu atau beberapa widget \"anak\" (child/children). Struktur inilah yang menjadi cetak biru (blueprint) dari seluruh tampilan aplikasi Anda.</p>",
        "align": "left",
        "size": "base"
      }
    },
    {
      "type": "card",
      "id": "widget-types",
      "data": {
        "title": "StatelessWidget vs StatefulWidget",
        "columns": 2,
        "cards": [
          {
            "title": "StatelessWidget",
            "description": "Widget yang \"tidak memiliki state\" atau data internal yang bisa berubah. Seperti poster yang sudah dicetak - isinya tetap dan tidak akan pernah berubah selama aplikasi berjalan.",
            "image": null,
            "buttons": []
          },
          {
            "title": "StatefulWidget",
            "description": "Widget yang \"memiliki state\" atau data internal yang dapat berubah sepanjang waktu. Seperti papan skor digital yang angkanya bisa berubah setiap kali ada gol.",
            "image": null,
            "buttons": []
          }
        ]
      }
    },
    {
      "type": "text",
      "id": "layout-intro",
      "data": {
        "content": "<h2 class='text-2xl font-bold mb-4'>Pengenalan Layout UI Flutter</h2><h3 class='text-xl font-semibold mb-3'>Peran Widget Layout dalam Flutter</h3><p class='mb-4'>Setelah memahami konsep dasar widget, langkah selanjutnya adalah mempelajari bagaimana widget-widget ini dapat disusun untuk menciptakan antarmuka pengguna yang terstruktur dan estetis. Di sinilah widget layout berperan. Widget layout adalah jenis widget khusus yang bertugas mengatur posisi, ukuran, dan tata letak widget lain di dalamnya.</p>",
        "align": "left",
        "size": "base"
      }
    },
    {
      "type": "accordion",
      "id": "layout-widgets",
      "data": {
        "title": "Widget Layout Dasar",
        "allowMultiple": false,
        "items": [
          {
            "title": "Column - Layout Vertikal",
            "content": "<div class='space-y-4'><p><strong>Fungsi:</strong> Menyusun widget-widget anaknya secara vertikal, dari atas ke bawah.</p><p><strong>Penggunaan:</strong> Cocok untuk membuat tata letak di mana elemen-elemen harus ditampilkan dalam satu kolom, seperti daftar atau form.</p><p><strong>Properti Utama:</strong></p><ul class='list-disc list-inside ml-4'><li>mainAxisAlignment: Mengatur posisi widget di sepanjang sumbu utama (vertikal)</li><li>crossAxisAlignment: Mengatur posisi widget di sepanjang sumbu sekunder (horizontal)</li></ul></div>"
          },
          {
            "title": "Row - Layout Horizontal",
            "content": "<div class='space-y-4'><p><strong>Fungsi:</strong> Menyusun widget-widget anaknya secara horizontal, dari kiri ke kanan.</p><p><strong>Penggunaan:</strong> Cocok untuk membuat tata letak di mana elemen-elemen harus ditampilkan dalam satu baris, seperti tombol navigasi atau ikon.</p><p><strong>Properti Utama:</strong></p><ul class='list-disc list-inside ml-4'><li>mainAxisAlignment: Mengatur posisi widget di sepanjang sumbu utama (horizontal)</li><li>crossAxisAlignment: Mengatur posisi widget di sepanjang sumbu sekunder (vertikal)</li></ul></div>"
          },
          {
            "title": "Container - Kotak Serbaguna",
            "content": "<div class='space-y-4'><p><strong>Fungsi:</strong> Sebuah \"kotak serbaguna\" yang dapat digunakan untuk membungkus widget lain dengan properti tambahan.</p><p><strong>Penggunaan:</strong> Cocok untuk membuat elemen UI yang membutuhkan penyesuaian visual, seperti latar belakang berwarna atau batasan ukuran.</p><p><strong>Properti Utama:</strong></p><ul class='list-disc list-inside ml-4'><li>color: Memberikan warna latar belakang</li><li>width dan height: Mengatur ukuran container</li><li>decoration: Menambahkan dekorasi seperti bingkai atau bayangan</li></ul></div>"
          },
          {
            "title": "Padding - Ruang Kosong",
            "content": "<div class='space-y-4'><p><strong>Fungsi:</strong> Memberikan ruang kosong di sekeliling widget anaknya.</p><p><strong>Penggunaan:</strong> Cocok untuk mengatur jarak antara elemen UI agar terlihat lebih rapi dan terstruktur.</p><p><strong>Properti Utama:</strong></p><ul class='list-disc list-inside ml-4'><li>padding: Mengatur jumlah ruang kosong di setiap sisi (atas, bawah, kiri, kanan)</li></ul></div>"
          }
        ]
      }
    },
    {
      "type": "code",
      "id": "column-example",
      "data": {
        "title": "Contoh Column Widget",
        "description": "Implementasi dasar Column untuk menyusun widget secara vertikal:",
        "filePath": "./assets/code/modul1/column_example.dart",
        "language": "dart",
        "code": "Column(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    Text('Widget 1'),\n    Text('Widget 2'),\n    Text('Widget 3'),\n  ],\n)",
        "showLineNumbers": true,
        "showPreview": false,
        "showShare": true,
        "downloadable": true
      }
    },
    {
      "type": "code",
      "id": "row-example",
      "data": {
        "title": "Contoh Row Widget",
        "description": "Implementasi dasar Row untuk menyusun widget secara horizontal:",
        "filePath": "./assets/code/modul1/row_example.dart",
        "language": "dart",
        "code": "Row(\n  mainAxisAlignment: MainAxisAlignment.spaceAround,\n  children: [\n    Icon(Icons.home),\n    Icon(Icons.search),\n    Icon(Icons.settings),\n  ],\n)",
        "showLineNumbers": true,
        "showPreview": false,
        "showShare": true,
        "downloadable": true
      }
    },
    {
      "type": "text",
      "id": "state-management-intro",
      "data": {
        "content": "<h2 class='text-2xl font-bold mb-4'>State Management pada Flutter: setState vs External State</h2><h3 class='text-xl font-semibold mb-3'>Pendahuluan</h3><p class='mb-4'>Flutter dikenal karena kemampuannya untuk membangun antarmuka pengguna yang interaktif dan responsif. Salah satu elemen utama dalam membangun UI dinamis adalah state management. State adalah data yang menentukan bagaimana suatu widget terlihat atau berperilaku pada waktu tertentu.</p><p class='mb-4'>Pertanyaannya adalah: Bagaimana cara memberitahu Flutter bahwa ada data yang berubah dan UI perlu diperbarui?</p>",
        "align": "left",
        "size": "base"
      }
    },
    {
      "type": "accordion",
      "id": "state-management-concepts",
      "data": {
        "title": "Konsep State Management",
        "allowMultiple": false,
        "items": [
          {
            "title": "setState() dan Batasannya",
            "content": "<div class='space-y-4'><p>Di sinilah fungsi <code>setState()</code> berperan. Ketika Anda memanggil <code>setState()</code> di dalam sebuah StatefulWidget, Anda pada dasarnya mengirim sinyal ke Flutter: \"Hei, ada data di dalam widget ini yang baru saja saya ubah. Tolong gambar ulang bagian UI yang bergantung pada data tersebut!\"</p><p><strong>Keunggulan setState():</strong></p><ul class='list-disc list-inside ml-4'><li>Sederhana dan mudah dipahami</li><li>Cocok untuk mengelola state lokal</li></ul><p><strong>Batasan setState():</strong></p><ul class='list-disc list-inside ml-4'><li>Tidak scalable untuk state global</li><li>Menyulitkan pengelolaan data yang dibagikan ke banyak widget</li></ul></div>"
          },
          {
            "title": "Konteks untuk State yang Lebih Kompleks",
            "content": "<div class='space-y-4'><p>Bayangkan sebuah aplikasi e-commerce. Data seperti:</p><ul class='list-disc list-inside ml-4'><li>Status login pengguna: Dibutuhkan oleh halaman utama, halaman profil, dan halaman pengaturan</li><li>Isi keranjang belanja: Dibutuhkan oleh halaman utama, halaman produk, dan halaman checkout</li></ul><p>Menggunakan setState() untuk mengelola data seperti ini akan sangat merepotkan karena Anda harus mengoper data dari satu widget ke widget lainnya secara manual.</p></div>"
          },
          {
            "title": "Provider sebagai Solusi",
            "content": "<div class='space-y-4'><p>Provider adalah sebuah paket Flutter yang memungkinkan Anda untuk \"menyediakan\" state di puncak widget tree, sehingga widget mana pun di bawahnya dapat mendengarkan dan menggunakan state tersebut tanpa perlu operan manual.</p><p><strong>Keunggulan Provider:</strong></p><ul class='list-disc list-inside ml-4'><li>Scalable: Cocok untuk aplikasi besar dengan banyak halaman</li><li>Efisien: Mengurangi kompleksitas pengelolaan state global</li><li>Reactive: UI akan diperbarui secara otomatis ketika state berubah</li></ul></div>"
          }
        ]
      }
    },
    {
      "type": "text",
      "id": "implementation-intro",
      "data": {
        "content": "<h2 class='text-2xl font-bold mb-4'>Implementasi Aplikasi Sederhana</h2><p class='mb-4'>Teori sudah cukup, saatnya praktik! Untuk memahami bagaimana state management bekerja dalam Flutter, kita akan membuat aplikasi paling klasik untuk mendemonstrasikan state: Aplikasi Counter. Aplikasi ini akan menunjukkan perbedaan antara StatelessWidget dan StatefulWidget, serta bagaimana state dapat mengubah tampilan UI berdasarkan interaksi pengguna.</p>",
        "align": "left",
        "size": "base"
      }
    },
    {
      "type": "accordion",
      "id": "counter-implementation",
      "data": {
        "title": "Implementasi Counter App",
        "allowMultiple": false,
        "items": [
          {
            "title": "Versi Stateless: Memahami Keterbatasan",
            "content": "<div class='space-y-4'><p>Pertama, kita akan mencoba membuat aplikasi counter menggunakan StatelessWidget. Anda akan melihat bahwa meskipun tombol dapat ditekan, angka di layar tidak akan pernah bertambah. Hal ini membuktikan bahwa StatelessWidget hanya cocok untuk UI yang statis atau tidak bergantung pada perubahan data internal.</p><p><strong>Hasil:</strong></p><ul class='list-disc list-inside ml-4'><li>Angka counter di layar tidak berubah meskipun tombol ditekan</li><li>StatelessWidget tidak memiliki mekanisme untuk memperbarui UI berdasarkan perubahan data</li></ul></div>"
          },
          {
            "title": "Versi Stateful: Menghidupkan Interaksi",
            "content": "<div class='space-y-4'><p>Selanjutnya, kita akan mengubah aplikasi tersebut menjadi StatefulWidget. Dengan menambahkan sebuah variabel untuk menyimpan angka hitungan dan memanggil setState() setiap kali tombol ditekan, angka di layar pun akan diperbarui. Di sini Anda akan melihat langsung kekuatan dari internal state dan fungsi setState().</p><p><strong>Hasil:</strong></p><ul class='list-disc list-inside ml-4'><li>Angka counter di layar akan bertambah setiap kali tombol ditekan</li><li>Fungsi setState() memberitahu Flutter bahwa ada data yang berubah, sehingga UI perlu digambar ulang</li></ul></div>"
          }
        ]
      }
    },
    {
      "type": "code",
      "id": "stateless-counter",
      "data": {
        "title": "StatelessWidget Counter (Tidak Berfungsi)",
        "description": "Contoh counter menggunakan StatelessWidget yang tidak dapat memperbarui UI:",
        "filePath": "./assets/code/modul1/stateless_counter.dart",
        "language": "dart",
        "code": "class StatelessCounterApp extends StatelessWidget {\n  int counter = 0; // Variabel statis, tidak akan berubah\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Stateless Counter')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text('Counter: $counter'),\n              ElevatedButton(\n                onPressed: () {\n                  counter++; // Tidak akan memperbarui UI\n                  print('Counter: $counter');\n                },\n                child: Text('Increment'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}",
        "showLineNumbers": true,
        "highlightLines": [2, 15, 16],
        "showPreview": false,
        "showShare": true,
        "downloadable": true
      }
    },
    {
      "type": "code",
      "id": "stateful-counter",
      "data": {
        "title": "StatefulWidget Counter (Berfungsi)",
        "description": "Contoh counter menggunakan StatefulWidget dengan setState():",
        "filePath": "./assets/code/modul1/stateful_counter.dart",
        "language": "dart",
        "code": "class StatefulCounterApp extends StatefulWidget {\n  @override\n  _StatefulCounterAppState createState() => _StatefulCounterAppState();\n}\n\nclass _StatefulCounterAppState extends State<StatefulCounterApp> {\n  int _counter = 0; // Variabel state untuk menyimpan angka\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++; // Memperbarui angka dan UI\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Stateful Counter')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text('Counter: $_counter'),\n              ElevatedButton(\n                onPressed: _incrementCounter,\n                child: Text('Increment'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}",
        "showLineNumbers": true,
        "highlightLines": [7, 9, 10, 11, 12],
        "showPreview": false,
        "showShare": true,
        "downloadable": true
      }
    },
    {
      "type": "table",
      "id": "comparison-table",
      "data": {
        "title": "Perbandingan StatelessWidget vs StatefulWidget",
        "headers": ["Aspek", "StatelessWidget", "StatefulWidget"],
        "rows": [
          ["Pembaruan UI", "Tidak dapat memperbarui UI", "Dapat memperbarui UI dengan setState()"],
          ["Cocok untuk", "UI statis atau tidak interaktif", "UI dinamis atau interaktif"],
          ["Pengelolaan State", "Tidak memiliki state internal", "Memiliki state internal"],
          ["Performa", "Lebih ringan dan cepat", "Sedikit lebih berat karena lifecycle"],
          ["Kompleksitas", "Sederhana", "Lebih kompleks dengan State class"]
        ],
        "responsive": true
      }
    },
    {
      "type": "text",
      "id": "profiling-intro",
      "data": {
        "content": "<h2 class='text-2xl font-bold mb-4'>Profiling Sederhana</h2><h3 class='text-xl font-semibold mb-3'>Mengapa Profiling Penting?</h3><p class='mb-4'>Dalam pengembangan aplikasi Flutter, efisiensi adalah kunci untuk memastikan aplikasi berjalan mulus dan responsif. Salah satu aspek penting dalam efisiensi adalah meminimalkan rebuild widget yang tidak perlu. Untuk itu, kita perlu memahami widget mana yang sedang digambar ulang dan seberapa sering hal itu terjadi.</p><p class='mb-4'>Proses ini disebut profiling, dan sangat penting untuk mengoptimalkan performa aplikasi.</p>",
        "align": "left",
        "size": "base"
      }
    },
    {
      "type": "accordion",
      "id": "profiling-methods",
      "data": {
        "title": "Metode Profiling Flutter",
        "allowMultiple": false,
        "items": [
          {
            "title": "Memanfaatkan debugPrint()",
            "content": "<div class='space-y-4'><p>Cara paling sederhana untuk melacak rebuild widget adalah dengan menggunakan perintah <code>debugPrint()</code> di dalam metode build() sebuah widget. Setiap kali widget tersebut digambar ulang, pesan akan muncul di konsol.</p><p><strong>Hasil:</strong></p><ul class='list-disc list-inside ml-4'><li>Setiap kali widget digambar ulang, pesan akan muncul di konsol</li><li>Anda dapat melacak frekuensi dan waktu rebuild untuk widget tertentu</li></ul></div>"
          },
          {
            "title": "Hot Reload vs Hot Restart",
            "content": "<div class='space-y-4'><p>Dalam Flutter, ada dua cara utama untuk memuat ulang aplikasi saat Anda melakukan perubahan kode:</p><p><strong>Hot Reload:</strong></p><ul class='list-disc list-inside ml-4'><li>Memuat ulang perubahan kode dengan cepat tanpa mereset state aplikasi</li><li>Cocok untuk perbaikan UI, seperti perubahan tata letak, warna, atau teks</li></ul><p><strong>Hot Restart:</strong></p><ul class='list-disc list-inside ml-4'><li>Memulai ulang seluruh aplikasi dan mereset semua state</li><li>Dibutuhkan jika ada perubahan pada logika state awal atau struktur aplikasi</li></ul></div>"
          },
          {
            "title": "Flutter DevTools",
            "content": "<div class='space-y-4'><p>Untuk analisis yang lebih mendalam, Flutter menyediakan alat bernama DevTools. Alat ini memiliki berbagai fitur yang berguna untuk profiling dan debugging aplikasi Flutter.</p><p><strong>Fitur Utama DevTools:</strong></p><ul class='list-disc list-inside ml-4'><li><strong>Flutter Inspector:</strong> Memvisualisasikan widget tree aplikasi Anda</li><li><strong>Repaint Rainbow:</strong> Memberikan warna berbeda pada layer-layer widget setiap kali mereka digambar ulang</li></ul><p>Sangat membantu untuk mendeteksi rebuild yang tidak perlu dan mengoptimalkan performa aplikasi.</p></div>"
          }
        ]
      }
    },
    {
      "type": "code",
      "id": "profiling-example",
      "data": {
        "title": "Contoh Profiling dengan debugPrint()",
        "description": "Cara melacak rebuild widget menggunakan debugPrint():",
        "filePath": "./assets/code/modul1/profiling_example.dart",
        "language": "dart",
        "code": "class ProfilingWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    debugPrint('ProfilingWidget is rebuilding!'); // Melacak rebuild\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Profiling Sederhana')),\n        body: Center(\n          child: Text('Hello, Profiling!'),\n        ),\n      ),\n    );\n  }\n}",
        "showLineNumbers": true,
        "highlightLines": [4],
        "showPreview": false,
        "showShare": true,
        "downloadable": true
      }
    },
    {
      "type": "alert",
      "id": "performance-tips",
      "data": {
        "type": "success",
        "title": "Tips Optimasi Performa",
        "content": "1. Gunakan const Widget untuk widget yang tidak pernah berubah. 2. Minimalkan rebuild dengan menghindari setState() untuk seluruh widget tree. 3. Pisahkan widget menjadi bagian-bagian kecil agar hanya bagian yang relevan yang digambar ulang.",
        "dismissible": false
      }
    },
    {
      "type": "download",
      "id": "download-section",
      "data": {
        "title": "Download Materi Modul 1",
        "description": "Download source code lengkap dan materi tambahan untuk modul ini:",
        "files": [
          {
            "name": "Flutter Widget Examples",
            "description": "Complete Dart code examples for all widgets",
            "url": "./assets/code/modul1/flutter_examples.zip",
            "type": "zip",
            "size": "1.8 MB"
          },
          {
            "name": "Flutter Widget Cheatsheet",
            "description": "Quick reference for Flutter widgets and layouts",
            "url": "./assets/downloads/flutter-widget-cheatsheet.pdf",
            "type": "pdf",
            "size": "950 KB"
          },
          {
            "name": "State Management Guide",
            "description": "Comprehensive guide to Flutter state management",
            "url": "./assets/downloads/state-management-guide.pdf",
            "type": "pdf",
            "size": "1.1 MB"
          }
        ]
      }
    },
    {
      "type": "alert",
      "id": "next-module-alert",
      "data": {
        "type": "success",
        "title": "Selamat! Anda telah menyelesaikan Modul 1",
        "content": "Anda telah berhasil mempelajari dasar-dasar Flutter Widget Tree dan State Management. Selanjutnya, mari pelajari tentang Layout dan UI Components yang lebih advanced di Modul 2.",
        "dismissible": false
      }
    }
  ]
}
